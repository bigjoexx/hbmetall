<script>
  const VAT_RATE = 0.19;
  
async function fetchPrices() {
  // Fetch prices from Airtable
  // Replace with your API key and Airtable URL
  const response = await fetch("https://api.airtable.com/v0/appIIKEo5ExPVPr9I/HEA?api_key=keyLAGDgC4VT8YzLb");
  const data = await response.json();
  const records = data.records;
  const prices = {};

  records.forEach((record) => {
    prices[record.fields["HEA Size"]] = record.fields;
  });

  return prices;
}

function getSelectedValues() {
  const heaSize = document.getElementById("hea-size").value;
  const beamLength = parseFloat(document.getElementById("beam-length").value);
  const heaStegbleche = parseInt(document.getElementById("hea-stegbleche").value, 10);
  const heaAusklinkungen = parseInt(document.getElementById("hea-ausklinkungen").value, 10);
  const heaBugel = parseInt(document.getElementById("hea-bugel").value, 10);
  const heaBohrungen = parseInt(document.getElementById("hea-bohrungen").value, 10);
  const heaBohrungenDurchmesser = parseInt(document.getElementById("hea-bohrungen-durchmesser").value, 10);
  const heaWeiteres = document.getElementById("hea-weiteres").value;
  const beamMenge = parseInt(document.getElementById("beam-menge").value, 10);

  return {
    heaSize,
    beamLength,
    heaStegbleche,
    heaAusklinkungen,
    heaBugel,
    heaBohrungen,
    heaBohrungenDurchmesser,
    heaWeiteres,
    beamMenge,
  };
}
    
function calculateLengthPrice(heaSize, beamLength, pricesData) {
  if (!pricesData.hasOwnProperty(heaSize)) {
    console.error("HEA size not found in prices data:", heaSize);
    return 0;
  }

  const kgPerMeter = parseFloat(pricesData[heaSize]["kg/m"]);
  const beamLengthInMeters = beamLength / 1000;
  const totalWeight = kgPerMeter * beamLengthInMeters;
  const pricePerKg = parseFloat(pricesData[heaSize]["kg"]);
  const lengthPrice = totalWeight * pricePerKg;

  return lengthPrice;
}

function calculateOptionsPrice(selectedValues, pricesData) {
  const {
    heaSize,
    heaStegbleche,
    heaAusklinkungen,
    heaBugel,
    heaWeiteres,
    heaBohrungen,
    heaBohrungenDurchmesser,
    beamMenge,
  } = selectedValues;

  const stegblechePrice = parseFloat(pricesData[heaSize]["stegbleche"]) * heaStegbleche;
  const ausklinkungenPrice = parseFloat(pricesData[heaSize]["ausklinkungen"]) * heaAusklinkungen;
  const bugelPrice = parseFloat(pricesData[heaSize]["bugel"]) * heaBugel;

  // Extract the price for the selected "hea-weiteres" option from the respective column in the table
  const weiteresOption = document.getElementById("hea-weiteres").value;
  const weiteresPrice = parseFloat(pricesData[heaSize][weiteresOption]);
    
    let diameterCategory = "";
const diameter = parseInt(heaBohrungenDurchmesser);

if (diameter >= 6 && diameter <= 13) {
  diameterCategory = "6-13";
} else if (diameter >= 14 && diameter <= 18) {
  diameterCategory = "14-18";
} else if (diameter >= 19 && diameter <= 22) {
  diameterCategory = "19-22";
} else {
  console.error("Invalid diameter value:", diameter);
}

// Calculate the bohrungen price
const bohrungenPricePerHole = parseFloat(pricesData[heaSize][diameterCategory]);
const bohrungenPrice = bohrungenPricePerHole * heaBohrungen;

console.log("Bohrungen price:", bohrungenPrice);

  console.log("Stegbleche price:", stegblechePrice);
  console.log("Ausklinkungen price:", ausklinkungenPrice);
  console.log("Bugel price:", bugelPrice);
  console.log("Weiteres price:", weiteresPrice);

  const optionsPrice = stegblechePrice + ausklinkungenPrice + bugelPrice + weiteresPrice + bohrungenPrice;
  return optionsPrice;
}


function calculateTotalPrice(selectedValues, pricesData, kopfplattePricesData, beamMenge) {
  const lengthPrice = calculateLengthPrice(selectedValues.heaSize, parseInt(selectedValues.beamLength), pricesData);
  console.log("Length price:", lengthPrice);
  const optionsPrice = calculateOptionsPrice(selectedValues, pricesData);
  console.log("Options price:", optionsPrice);
  const baseCuttingPrice = parseFloat(pricesData[selectedValues.heaSize]["schneiden"]);
  console.log("Base cutting price:", baseCuttingPrice);

  const isKopfplatteChecked = document.getElementById("kopfplatte-checkbox").checked;

  let kopfplattePrice = 0;

  if (isKopfplatteChecked) {
    kopfplattePrice = calculateKopfplattePrice(getKopfplatteSelectedValues(), kopfplattePricesData);
  }

  const totalPrice = ((lengthPrice + optionsPrice + baseCuttingPrice) * beamMenge) + kopfplattePrice;
  console.log("Total price:", totalPrice);
  return totalPrice;
}



function setDefaultValues() {
  const beamLengthInput = document.getElementById("beam-length");
  if (beamLengthInput) {
    beamLengthInput.value = 1000;
  }
  const beamMengeInput = document.getElementById("beam-menge");
  if (beamMengeInput) {
    beamMengeInput.value = 1;
  }
}
    
function updateDisplayedPrices(oldPriceWithoutVAT, oldPriceWithVAT, totalPrice) {
  const priceWithoutVAT = totalPrice;
  const priceWithVAT = totalPrice * (1 + VAT_RATE);

  const priceWithVATElem = document.getElementById("price-vat");
  const priceWithoutVATElem = document.getElementById("price-novat");

  if (priceWithVATElem) {
    animateValue(priceWithVATElem, oldPriceWithVAT, priceWithVAT, 500);
  }
  if (priceWithoutVATElem) {
    animateValue(priceWithoutVATElem, oldPriceWithoutVAT, priceWithoutVAT, 500);
  }
}

//kopfplatte

function isKopfplatteChecked() {
  return document.getElementById("kopfplatte-checkbox").checked;
}
    
function getKopfplatteSelectedValues() {
  const fusplatteLange = parseFloat(document.getElementById("fusplatte-lange").value);
  const fusplatteBreite = parseFloat(document.getElementById("fusplatte-breite").value);
  const fusplatteDicke = parseFloat(document.getElementById("fusplatte-dicke").value);
  const anschweisen = document.getElementById("kopfplatte-anschweisen").value;
  const kehlnahtstarke = document.getElementById("kopfplatte-kehlnahtstarke").value;
  const dorne = document.getElementById("kopfplatte-dorne").value;
  const bohrungen = parseInt(document.getElementById("kopfplatte-bohrungen").value, 10);
  const bohrungenDurchmesser = parseInt(document.getElementById("kopfplatte-bohrungen-durchmesser").value, 10);

  return {
    fusplatteLange,
    fusplatteBreite,
    fusplatteDicke,
    anschweisen,
    kehlnahtstarke,
    dorne,
    bohrungen,
    bohrungenDurchmesser,
  };
}

async function fetchKopfplattePrices() {
  const response = await fetch("https://api.airtable.com/v0/appIIKEo5ExPVPr9I/Kopfplatte?api_key=keyLAGDgC4VT8YzLb");
  const data = await response.json();
  const records = data.records;
  const prices = {};

  records.forEach((record) => {
    prices[record.fields["Option"]] = record.fields;
  });

  return prices;
}

function calculateKopfplattePrice(selectedValues, kopfplattePricesData) {
  const {
    fusplatteLange,
    fusplatteBreite,
    fusplatteDicke,
    anschweisen,
    kehlnahtstarke,
    dorne,
    bohrungen,
    bohrungenDurchmesser,
  } = selectedValues;
    
// Calculate the price of the platte using steel density and volume
  const STEEL_DENSITY = 7850; // kg/m³
  const volume = (fusplatteLange / 1000) * (fusplatteBreite / 1000) * (fusplatteDicke / 1000); // m³
  const weight = volume * STEEL_DENSITY; // kg
  const pricePerKg = parseFloat(kopfplattePricesData["kg"]["Price"]);
  const plattePrice = weight * pricePerKg;

  // Calculate the price for other data
  const anschweisenPrice = parseFloat(kopfplattePricesData[anschweisen]["Price"]);
  const kehlnahtstarkePrice = parseFloat(kopfplattePricesData[kehlnahtstarke]["Price"]);
  const dornePrice = parseFloat(kopfplattePricesData[dorne]["Price"]);

  // Calculate the bohrungen price
  let diameterCategory = "";
  const diameter = parseInt(bohrungenDurchmesser);

  if (diameter >= 10 && diameter <= 13) {
    diameterCategory = "10-13";
  } else if (diameter >= 14 && diameter <= 18) {
    diameterCategory = "14-18";
  } else if (diameter >= 19 && diameter <= 22) {
    diameterCategory = "19-22";
  } else {
    console.error("Invalid diameter value:", diameter);
  }

  const bohrungenPricePerHole = parseFloat(kopfplattePricesData[diameterCategory]["Price"]);
  const bohrungenPrice = bohrungenPricePerHole * bohrungen;
  
    return kopfplattePrice;
}


function animateValue(element, start, end, duration) {
  const startTime = performance.now();
  const change = end - start;

  function updateValue(timestamp) {
    const elapsedTime = timestamp - startTime;
    const progress = Math.min(elapsedTime / duration, 1);
    const currentValue = start + change * progress;

    element.textContent = `€${currentValue.toFixed(2)}`;

    if (elapsedTime < duration) {
      window.requestAnimationFrame(updateValue);
    }
  }

  window.requestAnimationFrame(updateValue);
}

    
async function updatePrice(pricesData, kopfplattePricesData) {
  const selectedValues = getSelectedValues();
  const totalPrice = calculateTotalPrice(selectedValues, pricesData, selectedValues.beamMenge);

  const priceWithoutVATElem = document.getElementById("price-novat");
  const priceWithVATElem = document.getElementById("price-vat");

  const oldPriceWithoutVAT = parseFloat(priceWithoutVATElem.textContent.substr(1));
  const oldPriceWithVAT = parseFloat(priceWithVATElem.textContent.substr(1));

  updateDisplayedPrices(oldPriceWithoutVAT, oldPriceWithVAT, totalPrice);
}

async function main() {
  const pricesData = await fetchPrices();
  const kopfplattePricesData = await fetchKopfplattePrices();

  document.getElementById("hea-size").addEventListener("change", () => updatePrice(pricesData));
  document.getElementById("beam-length").addEventListener("change", () => updatePrice(pricesData));
  document.getElementById("hea-stegbleche").addEventListener("change", () => updatePrice(pricesData));
  document.getElementById("hea-ausklinkungen").addEventListener("change", () => updatePrice(pricesData));
  document.getElementById("hea-bugel").addEventListener("change", () => updatePrice(pricesData));
  document.getElementById("hea-weiteres").addEventListener("change", () => updatePrice(pricesData));
  document.getElementById("hea-bohrungen").addEventListener("change", () => updatePrice(pricesData));
  document.getElementById("hea-bohrungen-durchmesser").addEventListener("change", () => updatePrice(pricesData));
  document.getElementById("beam-menge").addEventListener("input", () => updatePrice(pricesData));
  document.getElementById("kopfplatte-checkbox").addEventListener("change", () => updatePrice(pricesData, kopfplattePricesData));
  document.getElementById("fusplatte-lange").addEventListener("change", () => updatePrice(pricesData, kopfplattePricesData));
  document.getElementById("fusplatte-breite").addEventListener("change", () => updatePrice(pricesData, kopfplattePricesData));
  document.getElementById("fusplatte-dicke").addEventListener("change", () => updatePrice(pricesData, kopfplattePricesData));
  document.getElementById("kopfplatte-anschweisen").addEventListener("change", () => updatePrice(pricesData, kopfplattePricesData));
  document.getElementById("kopfplatte-kehlnahtstarke").addEventListener("change", () => updatePrice(pricesData, kopfplattePricesData));
  document.getElementById("kopfplatte-dorne").addEventListener("change", () => updatePrice(pricesData, kopfplattePricesData));
  document.getElementById("kopfplatte-bohrungen").addEventListener("change", () => updatePrice(pricesData, kopfplattePricesData));
  document.getElementById("kopfplatte-bohrungen-durchmesser").addEventListener("change", () => updatePrice(pricesData, kopfplattePricesData));

  // Add event listeners for other form elements as needed
  
  setDefaultValues();
  updatePrice(pricesData); // Call once to initialize the price
}

main();


</script>
